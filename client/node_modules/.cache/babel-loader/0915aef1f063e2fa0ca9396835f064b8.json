{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderkim/Documents/Repositories/field-agent-security/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport NavBar from \"./components/NavBar\";\nimport FieldAgents from \"./components/FieldAgents\";\nimport Add from \"./components/AddFieldAgent\";\nimport Update from \"./components/UpdateFieldAgent\";\nimport Delete from \"./components/DeleteFieldAgent\";\nimport NotFound from \"./components/NotFound\";\nimport Login from \"./components/Login\";\nimport AuthContext from \"./AuthContext\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport jwtDecode from \"jwt-decode\";\nimport Registration from \"./components/Registration\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOKEN = 'jwt_token';\n\nfunction App() {\n  _s();\n\n  const [init, setInit] = useState(false);\n  const [authManager, setAuthManager] = useState({\n    user: null,\n    roles: null,\n\n    login(token) {\n      if (!this.user) {\n        const userData = jwtDecode(token);\n        localStorage.setItem(TOKEN, token);\n        setAuthManager(prevState => ({ ...prevState,\n          user: userData.sub,\n          roles: userData.authorities\n        }));\n      }\n    },\n\n    logout() {\n      if (this.user) {\n        localStorage.removeItem(TOKEN);\n        setAuthManager(prevState => ({ ...prevState,\n          user: null,\n          roles: null\n        }));\n      }\n    },\n\n    hasRole(role) {\n      return this.roles && this.roles.split(',').includes(`ROLE_${role.toUpperCase()}`);\n    }\n\n  });\n  useEffect(() => {\n    const token = localStorage.getItem(TOKEN);\n\n    if (token) {\n      authManager.login(token);\n    }\n\n    setInit(true);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar navbar-dark bg-dark\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"navbar-brand\",\n        children: \"Field Agent App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(FieldAgents, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"5ADx1PzM2Jd2izDITYusMA7/2gA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alexanderkim/Documents/Repositories/field-agent-security/client/src/App.js"],"names":["NavBar","FieldAgents","Add","Update","Delete","NotFound","Login","AuthContext","Route","Switch","useEffect","useState","Redirect","jwtDecode","Registration","TOKEN","App","init","setInit","authManager","setAuthManager","user","roles","login","token","userData","localStorage","setItem","prevState","sub","authorities","logout","removeItem","hasRole","role","split","includes","toUpperCase","getItem"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,GAAP,MAAgB,4BAAhB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;AAEA,MAAMC,KAAK,GAAG,WAAd;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC;AAC7CU,IAAAA,IAAI,EAAE,IADuC;AAE7CC,IAAAA,KAAK,EAAE,IAFsC;;AAG7CC,IAAAA,KAAK,CAACC,KAAD,EAAQ;AACX,UAAI,CAAC,KAAKH,IAAV,EAAgB;AACd,cAAMI,QAAQ,GAAGZ,SAAS,CAACW,KAAD,CAA1B;AACAE,QAAAA,YAAY,CAACC,OAAb,CAAqBZ,KAArB,EAA4BS,KAA5B;AACAJ,QAAAA,cAAc,CAAEQ,SAAD,KAAgB,EAAC,GAAGA,SAAJ;AAAeP,UAAAA,IAAI,EAAEI,QAAQ,CAACI,GAA9B;AAAmCP,UAAAA,KAAK,EAAEG,QAAQ,CAACK;AAAnD,SAAhB,CAAD,CAAd;AACD;AACF,KAT4C;;AAU7CC,IAAAA,MAAM,GAAG;AACP,UAAI,KAAKV,IAAT,EAAe;AACbK,QAAAA,YAAY,CAACM,UAAb,CAAwBjB,KAAxB;AACAK,QAAAA,cAAc,CAAEQ,SAAD,KAAgB,EAAC,GAAGA,SAAJ;AAAeP,UAAAA,IAAI,EAAE,IAArB;AAA2BC,UAAAA,KAAK,EAAE;AAAlC,SAAhB,CAAD,CAAd;AACD;AACF,KAf4C;;AAgB7CW,IAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,aAAO,KAAKZ,KAAL,IAAc,KAAKA,KAAL,CAAWa,KAAX,CAAiB,GAAjB,EAAsBC,QAAtB,CAAgC,QAAOF,IAAI,CAACG,WAAL,EAAmB,EAA1D,CAArB;AACD;;AAlB4C,GAAD,CAA9C;AAqBA3B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,KAAK,GAAGE,YAAY,CAACY,OAAb,CAAqBvB,KAArB,CAAd;;AACA,QAAIS,KAAJ,EAAW;AACTL,MAAAA,WAAW,CAACI,KAAZ,CAAkBC,KAAlB;AACD;;AACDN,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GANQ,EAMN,EANM,CAAT;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA,6BACE;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAzCQF,G;;KAAAA,G;AA2CT,eAAeA,GAAf","sourcesContent":["import NavBar from \"./components/NavBar\";\nimport FieldAgents from \"./components/FieldAgents\";\nimport Add from \"./components/AddFieldAgent\";\nimport Update from \"./components/UpdateFieldAgent\";\nimport Delete from \"./components/DeleteFieldAgent\";\nimport NotFound from \"./components/NotFound\";\nimport Login from \"./components/Login\";\nimport AuthContext from \"./AuthContext\";\n\nimport { Route, Switch } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport jwtDecode from \"jwt-decode\";\nimport Registration from \"./components/Registration\";\n\nconst TOKEN = 'jwt_token';\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [authManager, setAuthManager] = useState({\n    user: null,\n    roles: null,\n    login(token) {\n      if (!this.user) {\n        const userData = jwtDecode(token);\n        localStorage.setItem(TOKEN, token);\n        setAuthManager((prevState) => ({...prevState, user: userData.sub, roles: userData.authorities}));\n      }\n    },\n    logout() {\n      if (this.user) {\n        localStorage.removeItem(TOKEN);\n        setAuthManager((prevState) => ({...prevState, user: null, roles: null}));\n      }\n    },\n    hasRole(role) {\n      return this.roles && this.roles.split(',').includes(`ROLE_${role.toUpperCase()}`);\n    }\n  });\n\n  useEffect(() => {\n    const token = localStorage.getItem(TOKEN);\n    if (token) {\n      authManager.login(token);\n    }\n    setInit(true);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <span className=\"navbar-brand\" >Field Agent App</span>\n      </nav>\n      <div className=\"container\">\n        <FieldAgents />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}